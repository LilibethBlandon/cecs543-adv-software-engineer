/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package metricssuite;

import java.awt.Component;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

//Fix new method so it resets the data
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    private static String currentLanguage = "None";
    private static Project project;
    private ArrayList<Integer> paneArrayList = new ArrayList<>();
    private boolean smiPanel = false;
    //private ArrayList<Project> projects = new ArrayList<Project>();
    
    public MainFrame() {
        initComponents();
        inputPreviousLanguage();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        file = new javax.swing.JMenu();
        file_new = new javax.swing.JMenuItem();
        file_open = new javax.swing.JMenuItem();
        file_save = new javax.swing.JMenuItem();
        file_exit = new javax.swing.JMenuItem();
        edit = new javax.swing.JMenu();
        language = new javax.swing.JMenu();
        preferences_language = new javax.swing.JMenuItem();
        metrics = new javax.swing.JMenu();
        metrics_fp = new javax.swing.JMenu();
        metrics_fp_data = new javax.swing.JMenuItem();
        metrics_ucp = new javax.swing.JMenu();
        metrics_ucp_data = new javax.swing.JMenuItem();
        metrics_smi = new javax.swing.JMenuItem();
        help = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CECS 543 Metrics Suite - Function Points");

        file.setText("File");

        file_new.setText("New");
        file_new.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                file_newActionPerformed(evt);
            }
        });
        file.add(file_new);

        file_open.setText("Open");
        file_open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                file_openActionPerformed(evt);
            }
        });
        file.add(file_open);

        file_save.setText("Save");
        file_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                file_saveActionPerformed(evt);
            }
        });
        file.add(file_save);

        file_exit.setText("Exit");
        file_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                file_exitActionPerformed(evt);
            }
        });
        file.add(file_exit);

        jMenuBar1.add(file);

        edit.setText("Edit");
        jMenuBar1.add(edit);

        language.setText("Preferences");

        preferences_language.setText("Language");
        preferences_language.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                preferences_languageActionPerformed(evt);
            }
        });
        language.add(preferences_language);

        jMenuBar1.add(language);

        metrics.setText("Metrics");

        metrics_fp.setText("Function Points");

        metrics_fp_data.setText("FP Data");
        metrics_fp_data.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metrics_fp_dataActionPerformed(evt);
            }
        });
        metrics_fp.add(metrics_fp_data);

        metrics.add(metrics_fp);

        metrics_ucp.setText("Use Case Points");

        metrics_ucp_data.setText("UCP Data");
        metrics_ucp_data.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metrics_ucp_dataActionPerformed(evt);
            }
        });
        metrics_ucp.add(metrics_ucp_data);

        metrics.add(metrics_ucp);

        metrics_smi.setText("SMI");
        metrics_smi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metrics_smiActionPerformed(evt);
            }
        });
        metrics.add(metrics_smi);

        jMenuBar1.add(metrics);

        help.setText("Help");
        jMenuBar1.add(help);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 802, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 487, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void file_newActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_file_newActionPerformed
        
        //paneArrayList = new ArrayList<>();
        //project = null;
        //smiPanel = false;
        NewWindow newWindow = new NewWindow(this, project);
        newWindow.setVisible(true);
        newWindow.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
//        System.out.println("Pane array list size: " + paneArrayList.size());
//        System.out.println("Project name: " + project.getProjectName());
    }//GEN-LAST:event_file_newActionPerformed

    private void file_openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_file_openActionPerformed
        ArrayList<String> data = new ArrayList<>();
        String projectName = "";
        String creator = "";
        int numberOfPanes;
        String [] paneArrayList;
        int counter1 = 0;
        int counter2 = 0;
        
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new java.io.File("."));
        fc.setDialogTitle("Open Project");
        FileFilter filter = new FileNameExtensionFilter("*.ms", ".ms", "ms");
        fc.setFileFilter(filter);
        if(fc.showOpenDialog(file_open) == JFileChooser.APPROVE_OPTION) {
            // read content
            String filepath = fc.getSelectedFile().getAbsolutePath();
            
            jTabbedPane1.removeAll();
            
            try {
                /*Help from: https://www.javatpoint.com/java-jfilechooser*/
                BufferedReader br = new BufferedReader(new FileReader(filepath));
                
                projectName = br.readLine(); //Line 1
                creator = br.readLine(); //Line2
                numberOfPanes = Integer.parseInt(br.readLine()); //Line3
                paneArrayList = br.readLine().split(","); //Line4
                
                createProject(projectName, "", creator, "");
                
                //FP Pane Variables
                String nameOfFPPane;
                String languageOfPane;
                String [] VAF ;
                String sumOfVAF;
                String [] functionData;
                String [] functionDataResults;
                String [] complexities;
                String functionPoints;
                String codeSize;
                String totalCount;
                
                //UCP Pane Variable
                String nameOfUCPPane;
                String UUCW_simple;
                String UUCW_average;
                String UUCW_complex;
                String UUCW_total;
                String UAW_simple;
                String UAW_average;
                String UAW_complex;
                String UAW_total;
                String UUCP_total;
                String PF;
                String LOC_PM;
                String LOC_UCP;
                String UCP_Total;
                String estimatedHours;
                String estimatedLOC;
                String estimatedPM;
                String [] tcfArray;
                String tcfSum;
                String [] ecfArray;
                String ecfSum;
                
                //SMI Pane Variables
                String [] smiData;
                String [] modulesAdded;
                String [] modulesChanged;
                String [] modulesDeleted;
                String [] totalModules;
                
//                System.out.println("ProjectName = " + projectName);
//                System.out.println("Creator = " + creator);
//                System.out.println("Number of Panes = " + numberOfPanes);
                //Read Data
                for (int i=0; i<paneArrayList.length; i++) {
                    String temp = br.readLine();
                    data.add(temp);
                    System.out.println("Line: " + temp);
                }
                br.close();
                
//                for(int i=0; i<data.size(); i++) {
//                    System.out.println(data.get(i));
//                }
//                
//                FunctionPointsPane p1 = new FunctionPointsPane("testing1", "", this);
//                p1.setVisible(true);
//                jTabbedPane1.addTab("testing1", p1);
//                project.addFunctionPointPane(p1);
//                //p1.setVisible(true);
//                
//                FunctionPointsPane p2 = new FunctionPointsPane("testing2", "", this);
//                p2.setVisible(true);
//                jTabbedPane1.addTab("testing2", p2);
//                project.addFunctionPointPane(p2);
//                //p2.setVisible(true);
//                
//                UseCasePointsPane u1 = new UseCasePointsPane("testing3", this);
//                u1.setVisible(true);
//                jTabbedPane1.addTab("testing3", u1);
//                project.addUseCasePointPane(u1);
                //u1.setVisible(true);
                
                //jTabbedPane1.setSelectedIndex(0);
                
//                System.out.println("How many tabs?");
                
                        //jTabbedPane1.getTabComponentAt(i).setVisible(true);///////************
                
                for(int i=0; i<data.size(); i++) {
                    //FP Pane
                    if(paneArrayList[i].equals("1")) {
                        //logic for FP Pane
                        String [] splitData = data.get(i).split("/");
                        nameOfFPPane = splitData[0];
                        languageOfPane = splitData[1];
                        VAF = splitData[2].split(",");
                        sumOfVAF = splitData[3];
                        functionData = splitData[4].split(",");
                        functionDataResults = splitData[5].split(",");
                        complexities = (splitData[6].split(","));
                        functionPoints = splitData[7];
                        codeSize = splitData[8];
                        totalCount = splitData[9];
                        
                        //Name of Pane
                        String s = nameOfFPPane;
                        FunctionPointsPane p = new FunctionPointsPane(s, "", this);
                        p.setVisible(true);
                        jTabbedPane1.addTab(s, p);
                        project.addFunctionPointPane(p);
                       // p.setVisible(true);
                        //jTabbedPane1.getTabComponentAt(i).setVisible(true);///////************
                        
                        
                        //Language
                        String language = languageOfPane;
                        project.getFunctionPointsPanes().get(counter1).setLanguage(language);
                        project.getFunctionPointsPanes().get(counter1).setLanguageData(language);
                        //VAF
                        int [] vafArray = new int[14];
                        for (int j=0; j<14; j++) {
                            vafArray[j] = Integer.parseInt(VAF[j]);
                        }
                        project.getFunctionPointsPanes().get(counter1).setValueAdjustmentList(vafArray);
                        //Sum of VAF
                        int sum = Integer.parseInt(sumOfVAF);
                        project.getFunctionPointsPanes().get(counter1).setValueAdjustmentSum(sum);
                        project.getFunctionPointsPanes().get(counter1).setValueAdjustmentData(Integer.toString(sum));
                        
                        //functionData
                        int value = 0;
                        
                        value = Integer.parseInt(functionData[0]);
                        project.getFunctionPointsPanes().get(counter1).setExternalInput(value);
                        project.getFunctionPointsPanes().get(counter1).setEIsEdit(Integer.toString(value));
                        
                        value = Integer.parseInt(functionData[1]);
                        project.getFunctionPointsPanes().get(counter1).setExternalOutput(value);
                        project.getFunctionPointsPanes().get(counter1).setEOsEdit(Integer.toString(value));
                        
                        value = Integer.parseInt(functionData[2]);
                        project.getFunctionPointsPanes().get(counter1).setExternalInquiries(value);
                        project.getFunctionPointsPanes().get(counter1).setEInqsEdit(Integer.toString(value));
                        
                        value = Integer.parseInt(functionData[3]);
                        project.getFunctionPointsPanes().get(counter1).setInternalLogicalFiles(value);
                        project.getFunctionPointsPanes().get(counter1).setILFsEdit(Integer.toString(value));
                        
                        value = Integer.parseInt(functionData[4]);
                        project.getFunctionPointsPanes().get(counter1).setExternalInterfaceFiles(value);
                        project.getFunctionPointsPanes().get(counter1).setEIFsEdit(Integer.toString(value));
                        
                        //functionDataResults
                        int value2 = 0;
                        value2 = Integer.parseInt(functionDataResults[0]);
                        project.getFunctionPointsPanes().get(counter1).setExternalInputResults(value2);
                        project.getFunctionPointsPanes().get(counter1).setEIData(Integer.toString(value2));
                        
                        value2 = Integer.parseInt(functionDataResults[1]);
                        project.getFunctionPointsPanes().get(counter1).setExternalOutputResults(value2);
                        project.getFunctionPointsPanes().get(counter1).setEOData(Integer.toString(value2));
                        
                        value2 = Integer.parseInt(functionDataResults[2]);
                        project.getFunctionPointsPanes().get(counter1).setExternalInquiriesResults(value2);
                        project.getFunctionPointsPanes().get(counter1).setEInqData(Integer.toString(value2));
                        
                        value2 = Integer.parseInt(functionDataResults[3]);
                        project.getFunctionPointsPanes().get(counter1).setInternalLogicalFilesResults(value2);
                        project.getFunctionPointsPanes().get(counter1).setILFData(Integer.toString(value2));
                        
                        value2 = Integer.parseInt(functionDataResults[4]);
                        project.getFunctionPointsPanes().get(counter1).setExternalInterfaceFilesResults(value2);
                        project.getFunctionPointsPanes().get(counter1).setEIFData(Integer.toString(value2));
                        
                        //Check here
                        //complexity
                        project.getFunctionPointsPanes().get(counter1).complexities(complexities);
                        
                        DecimalFormat df = new DecimalFormat("###,###,###.##");
                        
                        double sumOfFP = Double.parseDouble(functionPoints);
                        project.getFunctionPointsPanes().get(counter1).setComputeFP(sumOfFP);
                        String formattedFP = df.format(sumOfFP);
                        project.getFunctionPointsPanes().get(counter1).setComputeFPData(formattedFP);
                        
                        //codeSize
                        double sumOfCodeSize = Double.parseDouble(codeSize);
                        project.getFunctionPointsPanes().get(counter1).setCodeSize(sum);
                        formattedFP = df.format(sumOfCodeSize);
                        project.getFunctionPointsPanes().get(counter1).setComputeCodeSizeData(formattedFP);
                        
                        //totalCount
                        int sumOfTotalCount = Integer.parseInt(totalCount);
                        project.getFunctionPointsPanes().get(counter1).setTotalCount(sumOfTotalCount);
                        //String formattedFP = df.format(sum);
                        project.getFunctionPointsPanes().get(counter1).setTotalCountData(Integer.toString(sumOfTotalCount));
                        
                        counter1++;
                    }
                    //UCP Pane
                    else if(paneArrayList[i].equals("2")) {
                        //logic for UCP Pane
//                        UseCasePointsPane u = new UseCasePointsPane("testing", this);
//                        u.setVisible(true);
//                        jTabbedPane1.addTab("testing", u);
//                        project.addUseCasePointPane(u);
                        String [] splitData = data.get(i).split("/");
                        nameOfUCPPane = splitData[0];
                        UUCW_simple = splitData[1];
                        UUCW_average = splitData[2];
                        UUCW_complex = splitData[3];
                        UUCW_total = splitData[4];
                        UAW_simple = splitData[5];
                        UAW_average = splitData[6];
                        UAW_complex = splitData[7];
                        UAW_total = splitData[8];
                        UUCP_total = splitData[9];
                        PF = splitData[10];
                        LOC_PM = splitData[11];
                        LOC_UCP = splitData[12];
                        UCP_Total = splitData[13];
                        estimatedHours = splitData[14];
                        estimatedLOC = splitData[15];
                        estimatedPM = splitData[16];
                        tcfArray = splitData[17].split(",");
                        tcfSum = splitData[18];
                        ecfArray = splitData[19].split(",");
                        ecfSum = splitData[20];
                        
                        //Name of Pane
                        String s = nameOfUCPPane;
                        UseCasePointsPane u = new UseCasePointsPane(s, this);
                        u.setVisible(true);
                        jTabbedPane1.add(s, u);
                        project.addUseCasePointPane(u);
                        
                        //UUCW (simple, average, complex and total)
                        int value1 = 0;
                        value1 = Integer.parseInt(UUCW_simple);
                        project.getUseCasePointsPanes().get(counter2).setUUCW_simple(value1);
                        
                        int value2 = 0;
                        value2 = Integer.parseInt(UUCW_average);
                        project.getUseCasePointsPanes().get(counter2).setUUCW_average(value2);
                        
                        int value3 = 0;
                        value3 = Integer.parseInt(UUCW_complex);
                        project.getUseCasePointsPanes().get(counter2).setUUCW_complex(value3);
                        
                        int value4 = 0;
                        value4 = Integer.parseInt(UUCW_total);
                        project.getUseCasePointsPanes().get(counter2).setUUCW_total(value4);
                        
                        //set the values
                        project.getUseCasePointsPanes().get(counter2).setUUCW_Values(value1, value2, value3, value4);
                        
                        //UAW (simple, average, complex, total)
                        value1 = Integer.parseInt(UAW_simple);
                        project.getUseCasePointsPanes().get(counter2).setUAW_simple(value1);
                        
                        value2 = Integer.parseInt(UAW_average);
                        project.getUseCasePointsPanes().get(counter2).setUAW_average(value2);
                        
                        value3 = Integer.parseInt(UAW_complex);
                        project.getUseCasePointsPanes().get(counter2).setUAW_complex(value3);
                        
                        value4 = Integer.parseInt(UAW_total);
                        project.getUseCasePointsPanes().get(counter2).setUAW_total(value4);
                        
                        //set the values
                        project.getUseCasePointsPanes().get(counter2).setUAW_Values(value1, value2, value3, value4);
                        
                        //UUCP
                        value1 = Integer.parseInt(UUCP_total);
                        project.getUseCasePointsPanes().get(counter2).setUUCP(value1);
                        project.getUseCasePointsPanes().get(counter2).setUUCPTextfield(Integer.toString(value1));
                        
                        //PF
                        value1 = Integer.parseInt(PF);
                        project.getUseCasePointsPanes().get(counter2).setPF(value1);
                        project.getUseCasePointsPanes().get(counter2).setPFTextfield(Integer.toString(value1));
                        
                        //LOC_PM
                        value1 = Integer.parseInt(LOC_PM);
                        project.getUseCasePointsPanes().get(counter2).setLOC_pm(value1);
                        project.getUseCasePointsPanes().get(counter2).setLOC_PMTextfield(Integer.toString(value1));
                        
                        //LOC_UCP
                        value1 = Integer.parseInt(LOC_UCP);
                        project.getUseCasePointsPanes().get(counter2).setLOC_UCP(value1);
                        project.getUseCasePointsPanes().get(counter2).setLOC_UCPTextfield(Integer.toString(value1));
                        
                        //UCP_Total
                        double value5 = Double.parseDouble(UCP_Total);
                        project.getUseCasePointsPanes().get(counter2).setUCP_Total(value5);
                        project.getUseCasePointsPanes().get(counter2).setUCP_TotalTextfield(Double.toString(value5));
                        
                        //Estimated Hours
                        value5 = Double.parseDouble(estimatedHours);
                        project.getUseCasePointsPanes().get(counter2).setEstimatedHours(value5);
                        project.getUseCasePointsPanes().get(counter2).setEstimatedHoursTextfield(Double.toString(value5));
                        
                        //Estimated LOC
                        value5 = Double.parseDouble(estimatedLOC);
                        project.getUseCasePointsPanes().get(counter2).setEstimatedLOC(value5);
                        project.getUseCasePointsPanes().get(counter2).setEstimatedLOCTextfield(Double.toString(value5));
                        
                        //Estimated PM
                        value5 = Double.parseDouble(estimatedPM);
                        project.getUseCasePointsPanes().get(counter2).setEstimatedPM(value5);
                        project.getUseCasePointsPanes().get(counter2).setEstimatedPMTextfield(Double.toString(value5));
                        
                        //tcf Array
                        int [] arr1 = new int[tcfArray.length];
                        for(int j=0; j<arr1.length; j++) {
                            arr1[j] = Integer.parseInt(tcfArray[j]);
                        }
                        project.getUseCasePointsPanes().get(counter2).setTcfArray(arr1);
                        
                        //tcf sum
                        value5 = Double.parseDouble(tcfSum);
                        project.getUseCasePointsPanes().get(counter2).setTcfSum(value5);
                        project.getUseCasePointsPanes().get(counter2).setTcfSumTextfield(Double.toString(value5));
                        
                        //ecf Array
                        int [] arr2 = new int[ecfArray.length];
                        for(int j=0; j<arr2.length; j++) {
                            arr2[j] = Integer.parseInt(ecfArray[j]);
                        }
                        project.getUseCasePointsPanes().get(counter2).setEcfArray(arr2);
                        
                        //ecf sum
                        value5 = Double.parseDouble(ecfSum);
                        project.getUseCasePointsPanes().get(counter2).setEcfSum(value5);
                        project.getUseCasePointsPanes().get(counter2).setEcfSumTextfield(Double.toString(value5));
                        
                        counter2++;
                    }
                    else if(paneArrayList[i].equals("3")) {
                        String s = "SMI";
                        SoftwareMaturityIndexPane smi = new SoftwareMaturityIndexPane(s);
                        smi.setVisible(true);
                        jTabbedPane1.add(s, smi);
                        project.addSMIPane(smi);
                        
                        String [] splitData = data.get(i).split("/");
                        smiData = splitData[0].split(",");
                        modulesAdded = splitData[1].split(",");
                        modulesChanged = splitData[2].split(",");
                        modulesDeleted = splitData[3].split(",");
                        totalModules = splitData[4].split(",");
                        
                        //Add empty rows which is equal to the size of the arrays ^^
                        for(int j=0; j<smiData.length; j++) {
                            smi.addRow();
                        }
                        
                        //smiData for loop
                        for(int j=0; j<modulesAdded.length; j++) {
                            smi.modifyRowColumn(smiData[j], j, 0);
                        }
                        
                        //modulesAdded for loop
                        for(int j=0; j<modulesAdded.length; j++) {
                            smi.modifyRowColumn(modulesAdded[j], j, 1);
                        }
                        
                        //modulesChanged for loop
                        for(int j=0; j<modulesChanged.length; j++) {
                            smi.modifyRowColumn(modulesChanged[j], j, 2);
                        }
                        
                        //modulesDeleted for loop
                        for(int j=0; j<modulesDeleted.length; j++) {
                            smi.modifyRowColumn(modulesDeleted[j], j, 3);
                        }
                        
                        //totalModules for loop
                        for(int j=0; j<totalModules.length; j++) {
                            smi.modifyRowColumn(totalModules[j], j, 4);
                        }
                    }
                }
                    //Component c;
//                for (int i=0; i<numberOfPanes; i++) {
//                    c = jTabbedPane1.getComponentAt(i);
//                    c.setVisible(true);
//                }
            } catch (Exception ex) {ex.printStackTrace();}
        }
    }//GEN-LAST:event_file_openActionPerformed

    private void openFPMethod() {
        ArrayList<String> data = new ArrayList<>();
        String projectName = "";
        String creator = "";
        int numberOfPanes;

        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new java.io.File("."));
        fc.setDialogTitle("Open Project");
        FileFilter filter = new FileNameExtensionFilter("*.ms", ".ms", "ms");
        fc.setFileFilter(filter);
        if(fc.showOpenDialog(file_open) == JFileChooser.APPROVE_OPTION) {
            // read content
            String filepath = fc.getSelectedFile().getAbsolutePath();
            
            jTabbedPane1.removeAll();
            
            try {
                /*Help from: https://www.javatpoint.com/java-jfilechooser*/
                BufferedReader br = new BufferedReader(new FileReader(filepath));
                
                projectName = br.readLine();
                creator = br.readLine();
                numberOfPanes = Integer.parseInt(br.readLine());
                System.out.println("ProjectName = " + projectName);
                System.out.println("Creator = " + creator);
                System.out.println("Number of Panes = " + numberOfPanes);
                
                ArrayList<String> nameOfPanes = new ArrayList<>(); //
                ArrayList<String> languagesPerPane = new ArrayList<>(); //
                ArrayList<String []> vafPerPane = new ArrayList<>(); //
                ArrayList<String> sumOfVAFPerPane = new ArrayList<>(); //
                ArrayList<String []> functionDataPerPane = new ArrayList<>();
                ArrayList<String []> functionDataResultsPerPane = new ArrayList<>();
                ArrayList<String []> complexitiesPerPane = new ArrayList<>();
                ArrayList<String> functionPointsPerPane = new ArrayList<>();
                ArrayList<String> codeSizePerPane = new ArrayList<>();
                ArrayList<String> totalCountPerPane = new ArrayList<>();
                for(int i=0; i<numberOfPanes; i++) {
                    data.add(br.readLine());
                }
                br.close();

                //Grab the information from each line
                for(int i=0; i<data.size(); i++) {
                    String [] splitData = data.get(i).split("/");
                    nameOfPanes.add(splitData[0]);
                    languagesPerPane.add(splitData[1]);
                    vafPerPane.add(splitData[2].split(","));
                    sumOfVAFPerPane.add(splitData[3]);
                    functionDataPerPane.add(splitData[4].split(","));
                    functionDataResultsPerPane.add(splitData[5].split(","));
                    complexitiesPerPane.add(splitData[6].split(","));//
                    functionPointsPerPane.add(splitData[7]);
                    codeSizePerPane.add(splitData[8]);
                    totalCountPerPane.add(splitData[9]);
                }
                
                System.out.println("Name of Panes");
                for(int i=0; i<nameOfPanes.size(); i++) {
                System.out.println(nameOfPanes.get(i));
                }
                System.out.println("Languages");
                for(int i=0; i<nameOfPanes.size(); i++) {
                System.out.println(languagesPerPane.get(i));
                }
                System.out.println("Vaf");
                for(int i=0; i<nameOfPanes.size(); i++) {
                    for(int j=0; j<vafPerPane.get(i).length; j++) {
                        System.out.print(vafPerPane.get(i)[j]);
                    }
                    System.out.println("");
                }
                System.out.println("sum of Vaf");
                for(int i=0; i<nameOfPanes.size(); i++) {
                System.out.println(sumOfVAFPerPane.get(i) + ", ");
                }
                System.out.println("function data per pane");
                for(int i=0; i<nameOfPanes.size(); i++) {
                    for(int j=0; j<functionDataPerPane.get(i).length; j++) {
                            System.out.print(functionDataPerPane.get(i)[j] + ", ");
                        }
                    System.out.println("");
                }
                System.out.println("function data results per pane");
                for(int i=0; i<nameOfPanes.size(); i++) {
                    for(int j=0; j<functionDataResultsPerPane.get(i).length; j++) {
                            System.out.print(functionDataResultsPerPane.get(i)[j] + ", ");
                        }
                    System.out.println("");
                }
                System.out.println("Complexity Pane");
                for(int i=0; i<nameOfPanes.size(); i++) {
                    for(int j=0; j<complexitiesPerPane.get(i).length; j++) {
                            System.out.print(complexitiesPerPane.get(i)[j] + ", ");
                        }
                    System.out.println("");
                }
                System.out.println("FP per pane");
                for(int i=0; i<nameOfPanes.size(); i++) {
                System.out.println(functionPointsPerPane.get(i));
                }
                System.out.println("Code size per pane");
                for(int i=0; i<nameOfPanes.size(); i++) {
                System.out.println(codeSizePerPane.get(i));
                }
                System.out.println("total count pane");
                for(int i=0; i<nameOfPanes.size(); i++) {
                System.out.println(totalCountPerPane.get(i));
                }
                
                //Create project w/ information from textfile
                createProject(projectName, "", creator, "");
                //Name of Panes
                for (int i=0; i<numberOfPanes; i++) {
                    String s = nameOfPanes.get(i);
                    FunctionPointsPane p = new FunctionPointsPane(s, "", this);
                    jTabbedPane1.addTab(s, p);
                    //jTabbedPane1.ind
                    project.addFunctionPointPane(p);
                    p.setVisible(true);
                }
                //Language
                for(int i=0; i<numberOfPanes; i++) {
                    String language = languagesPerPane.get(i);
                    project.getFunctionPointsPanes().get(i).setLanguage(language);
                    project.getFunctionPointsPanes().get(i).setLanguageData(language);
                }
                //VAF Per FunctionPointsPane
                for(int i=0; i<numberOfPanes; i++) {
                    //System.out.print(VAF.get(1)[i] + ",");
                    int [] vafArray = new int[14];
                    for(int j=0; j<14; j++) {
                        vafArray[j] = Integer.parseInt(vafPerPane.get(i)[j]);
                    }
                    project.getFunctionPointsPanes().get(i).setValueAdjustmentList(vafArray);
                    
                }
                //SumOfVAFPerPane
                for(int i=0; i<numberOfPanes; i++) {
                    int sum = Integer.parseInt(sumOfVAFPerPane.get(i));
                    project.getFunctionPointsPanes().get(i).setValueAdjustmentSum(sum);
                    project.getFunctionPointsPanes().get(i).setValueAdjustmentData(Integer.toString(sum));
                }
                //functionDataPerPane
                int value = 0;
                for(int i=0; i<numberOfPanes; i++) {
                    value = Integer.parseInt(functionDataPerPane.get(i)[0]);
                    project.getFunctionPointsPanes().get(i).setExternalInput(value);
                    project.getFunctionPointsPanes().get(i).setEIsEdit(Integer.toString(value));
                    
                    value = Integer.parseInt(functionDataPerPane.get(i)[1]);
                    project.getFunctionPointsPanes().get(i).setExternalOutput(value);
                    project.getFunctionPointsPanes().get(i).setEOsEdit(Integer.toString(value));
                    
                    value = Integer.parseInt(functionDataPerPane.get(i)[2]);
                    project.getFunctionPointsPanes().get(i).setExternalInquiries(value);
                    project.getFunctionPointsPanes().get(i).setEInqsEdit(Integer.toString(value));
                    
                    value = Integer.parseInt(functionDataPerPane.get(i)[3]);
                    project.getFunctionPointsPanes().get(i).setInternalLogicalFiles(value);
                    project.getFunctionPointsPanes().get(i).setILFsEdit(Integer.toString(value));
                    
                    value = Integer.parseInt(functionDataPerPane.get(i)[4]);
                    project.getFunctionPointsPanes().get(i).setExternalInterfaceFiles(value);
                    project.getFunctionPointsPanes().get(i).setEIFsEdit(Integer.toString(value));
                }
                
                //functionDataResultsPerPane
                int value2 = 0;
                for(int i=0; i<numberOfPanes; i++) {
                    value2 = Integer.parseInt(functionDataResultsPerPane.get(i)[0]);
                    project.getFunctionPointsPanes().get(i).setExternalInputResults(value2);
                    project.getFunctionPointsPanes().get(i).setEIData(Integer.toString(value2));
                    
                    value2 = Integer.parseInt(functionDataResultsPerPane.get(i)[1]);
                    project.getFunctionPointsPanes().get(i).setExternalOutputResults(value2);
                    project.getFunctionPointsPanes().get(i).setEOData(Integer.toString(value2));
                    
                    value2 = Integer.parseInt(functionDataResultsPerPane.get(i)[2]);
                    project.getFunctionPointsPanes().get(i).setExternalInquiriesResults(value2);
                    project.getFunctionPointsPanes().get(i).setEInqData(Integer.toString(value2));
                    
                    value2 = Integer.parseInt(functionDataResultsPerPane.get(i)[3]);
                    project.getFunctionPointsPanes().get(i).setInternalLogicalFilesResults(value2);
                    project.getFunctionPointsPanes().get(i).setILFData(Integer.toString(value2));
                    
                    value2 = Integer.parseInt(functionDataResultsPerPane.get(i)[4]);
                    project.getFunctionPointsPanes().get(i).setExternalInterfaceFilesResults(value2);
                    project.getFunctionPointsPanes().get(i).setEIFData(Integer.toString(value2));
                }
                //complexity
                for (int i=0; i<numberOfPanes; i++) {
                    project.getFunctionPointsPanes().get(i).complexities(complexitiesPerPane.get(i));
                }
                DecimalFormat df = new DecimalFormat("###,###,###.##");
                
                //functionPointsPerPane
                for(int i=0; i<numberOfPanes; i++) {
                    double sum = Double.parseDouble(functionPointsPerPane.get(i));
                    project.getFunctionPointsPanes().get(i).setComputeFP(sum);
                    String formattedFP = df.format(sum);
                    project.getFunctionPointsPanes().get(i).setComputeFPData(formattedFP);
                }
               
                //codeSizePerPane
                for(int i=0; i<numberOfPanes; i++) {
                    double sum = Double.parseDouble(codeSizePerPane.get(i));
                    project.getFunctionPointsPanes().get(i).setCodeSize(sum);
                    String formattedFP = df.format(sum);
                    project.getFunctionPointsPanes().get(i).setComputeCodeSizeData(formattedFP);
                }       
                //totalCountPerPane
                for(int i=0; i<numberOfPanes; i++) {
                    int sum = Integer.parseInt(totalCountPerPane.get(i));
                    project.getFunctionPointsPanes().get(i).setTotalCount(sum);
                    //String formattedFP = df.format(sum);
                    project.getFunctionPointsPanes().get(i).setTotalCountData(Integer.toString(sum));
                }
            } catch (Exception ex) {ex.printStackTrace();}
        }
        else {
            System.out.println("Cancel");
        }
        System.out.println(fc.getSelectedFile().getAbsolutePath()); 
    }

    private void file_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_file_saveActionPerformed
        int counter1 = 0;
        int counter2 = 0;
        
        JFileChooser fileChooser = new JFileChooser();
        int response = fileChooser.showSaveDialog(null);
        
        File file2 = null;
        if(response == JFileChooser.APPROVE_OPTION) {
            file2 = new File(fileChooser.getSelectedFile().getAbsolutePath());
                //System.out.println(file2);
                //file2 = new File(fileChooser.getCurrentDirectory());


            File outputFile = new File(file2 + ".ms");


            FileWriter fWriter = null;
            try {
                fWriter = new FileWriter(outputFile);
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            //http://stackoverflow.com/questions/4269302/how-do-you-append-to-a-text-file-instead-of-overwriting-it-in-java
            PrintWriter pWriter = new PrintWriter(fWriter);
            
            
            pWriter.print(project.getProjectName() + "\n");
            pWriter.print(project.getCreator() + "\n");
            pWriter.print(paneArrayList.size() + "\n");
            //pWriter.print(project.getFunctionPointsPanes().size() + "\n");
            
            for(int i=0; i<paneArrayList.size(); i++) {
                if(i==(paneArrayList.size()-1)) {
                    pWriter.print(paneArrayList.get(i));
                }
                else {
                    pWriter.print(paneArrayList.get(i) + ",");
                }
            }
            pWriter.print("\n");
            
            for(int i=0; i<paneArrayList.size(); i++) {
            //for(int i=0; i<project.getFunctionPointsPanes().size(); i++) {
                //pWriter.print("---------------------------------------" + "\n");
                if(paneArrayList.get(i) == 1) {
                    String nameOfPane = project.getFunctionPointsPanes().get(counter1).getNameOfPane();
                    String currentLanguage = project.getFunctionPointsPanes().get(counter1).getLanguage();
                    int [] valueAdjustment = project.getFunctionPointsPanes().get(counter1).getValueAdjustmentList();
                    String valueAdjustmentSum = Integer.toString(project.getFunctionPointsPanes().get(counter1).getValueAdjustmentSum());
                    String EI = Integer.toString(project.getFunctionPointsPanes().get(counter1).getExternalInput());
                    String EO = Integer.toString(project.getFunctionPointsPanes().get(counter1).getExternalOutput());
                    String EInq = Integer.toString(project.getFunctionPointsPanes().get(counter1).getExternalInquiries());
                    String ILF = Integer.toString(project.getFunctionPointsPanes().get(counter1).getInternalLogicalFiles());
                    String EIF = Integer.toString(project.getFunctionPointsPanes().get(counter1).getExternalInterfaceFiles());

                    String EIResults = Integer.toString(project.getFunctionPointsPanes().get(counter1).getExternalInputResults());
                    String EOResults = Integer.toString(project.getFunctionPointsPanes().get(counter1).getExternalOutputResults());
                    String EInqResults = Integer.toString(project.getFunctionPointsPanes().get(counter1).getExternalInquiriesResults());
                    String ILFResults = Integer.toString(project.getFunctionPointsPanes().get(counter1).getInternalLogicalFilesResults());
                    String EIFResults = Integer.toString(project.getFunctionPointsPanes().get(counter1).getExternalInterfaceFilesResults());

                    String [] complexities = project.getFunctionPointsPanes().get(counter1).getComplexities();
                    String fp = Double.toString(project.getFunctionPointsPanes().get(counter1).getComputeFP());
                    String codeSize = Double.toString(project.getFunctionPointsPanes().get(counter1).getCodeSize());
                    String totalCount = Integer.toString(project.getFunctionPointsPanes().get(counter1).getTotalCount());
                    //Write
                    pWriter.print(nameOfPane + "/");
                    pWriter.print(currentLanguage + "/");
        //            for(int value=0; value<valueAdjustment.length; value++) {
        //                pWriter.print(valueAdjustment[value] + ",");
        //            }
                    pWriter.print(valueAdjustment[0] + ",");
                    pWriter.print(valueAdjustment[1] + ",");
                    pWriter.print(valueAdjustment[2] + ",");
                    pWriter.print(valueAdjustment[3] + ",");
                    pWriter.print(valueAdjustment[4] + ",");
                    pWriter.print(valueAdjustment[5] + ",");
                    pWriter.print(valueAdjustment[6] + ",");
                    pWriter.print(valueAdjustment[7] + ",");
                    pWriter.print(valueAdjustment[8] + ",");
                    pWriter.print(valueAdjustment[9] + ",");
                    pWriter.print(valueAdjustment[10] + ",");
                    pWriter.print(valueAdjustment[11] + ",");
                    pWriter.print(valueAdjustment[12] + ",");
                    pWriter.print(valueAdjustment[13] + "/");

                    pWriter.print(valueAdjustmentSum + "/");
                    pWriter.print(EI + "," + EO + "," + EInq + "," + ILF + "," + EIF + "/"); //MAYBE MAKE A LIST?
                    pWriter.print(EIResults + "," + EOResults + "," + EInqResults + "," + ILFResults + "," + EIFResults + "/");
        //            for(int c = 0; c<complexities.length; c++) {
        //                pWriter.print(complexities[c] + ",");
        //            }
                    pWriter.print(complexities[0] + ",");
                    pWriter.print(complexities[1] + ",");
                    pWriter.print(complexities[2] + ",");
                    pWriter.print(complexities[3] + ",");
                    pWriter.print(complexities[4] + "/");

                    pWriter.print(fp + "/");
                    pWriter.print(codeSize + "/");
                    pWriter.print(totalCount + "\n");
                    //pWriter.print("---------------------------------------");
                    counter1++;
                }
                else if(paneArrayList.get(i) == 2) {
                    //pWriter.print("UCP Pane\n");
                    //Read UCP Data
                    //Name of the Pane
                    String nameOfPane = project.getUseCasePointsPanes().get(counter2).getNameOfPane();
                    //UUCW
                    String UUCW_simple = Integer.toString(project.getUseCasePointsPanes().get(counter2).getUUCW_simple());
                    String UUCW_average = Integer.toString(project.getUseCasePointsPanes().get(counter2).getUUCW_average());
                    String UUCW_complex = Integer.toString(project.getUseCasePointsPanes().get(counter2).getUUCW_complex());
                    //UUCW total
                    String UUCW_total = Integer.toString(project.getUseCasePointsPanes().get(counter2).getUUCW_total());
                    //UAW
                    String UAW_simple = Integer.toString(project.getUseCasePointsPanes().get(counter2).getUAW_simple());
                    String UAW_average = Integer.toString(project.getUseCasePointsPanes().get(counter2).getUAW_average());
                    String UAW_complex = Integer.toString(project.getUseCasePointsPanes().get(counter2).getUAW_complex());
                    //UUAW Total
                    String UAW_total = Integer.toString(project.getUseCasePointsPanes().get(counter2).getUAW_total());
                    //UUCP
                    String UUCP_total = Integer.toString(project.getUseCasePointsPanes().get(counter2).getUUCP());
                    //Productivity Factor
                    String PF = Integer.toString(project.getUseCasePointsPanes().get(counter2).getPF());
                    //LOC/pm
                    String LOC_PM = Integer.toString(project.getUseCasePointsPanes().get(counter2).getLOC_pm());
                    //LOC/UCP
                    String LOC_UCP = Integer.toString(project.getUseCasePointsPanes().get(counter2).getLOC_UCP());
                    //UCP
                    String UCP_Total = Double.toString(project.getUseCasePointsPanes().get(counter2).getUCP_Total());
                    //Estimated Hours
                    String estimatedHours = Double.toString(project.getUseCasePointsPanes().get(counter2).getEstimatedHours());
                    //Estimated LOC
                    String estimatedLOC = Double.toString(project.getUseCasePointsPanes().get(counter2).getEstimatedLOC());
                    //Estimated PM
                    String estimatedPM = Double.toString(project.getUseCasePointsPanes().get(counter2).getEstimatedPM());
                    //TCF
                    int [] tcfArray = project.getUseCasePointsPanes().get(counter2).getTcfArray();
                    //TCF Sum
                    String tcfSum = Double.toString(project.getUseCasePointsPanes().get(counter2).getTcfSum());
                    //ECF
                    int [] ecfArray = project.getUseCasePointsPanes().get(counter2).getEcfArray();
                    //ECF Sum
                    String ecfSum = Double.toString(project.getUseCasePointsPanes().get(counter2).getEcfSum());
                    
                    /******Write Data******/
                    //Name of Pane
                    pWriter.print(nameOfPane + "/");
                    //UUCW
                    pWriter.print(UUCW_simple + "/");
                    pWriter.print(UUCW_average + "/");
                    pWriter.print(UUCW_complex + "/");
                    //UUCW Total
                    pWriter.print(UUCW_total + "/");
                    //UAW
                    pWriter.print(UAW_simple + "/");
                    pWriter.print(UAW_average + "/");
                    pWriter.print(UAW_complex + "/");
                    //UAW Total
                    pWriter.print(UAW_total + "/");
                    //UUCP
                    pWriter.print(UUCP_total + "/");
                    //PF
                    pWriter.print(PF + "/");
                    //LOC_PM
                    pWriter.print(LOC_PM + "/");
                    //LOC_UCP
                    pWriter.print(LOC_UCP + "/");
                    //UCP Total
                    pWriter.print(UCP_Total + "/");
                    //Estimated Hours
                    pWriter.print(estimatedHours + "/");
                    //Estimated LOC
                    pWriter.print(estimatedLOC + "/");
                    //Estimated PM
                    pWriter.print(estimatedPM + "/");
                    //TCF Array
                    pWriter.print(tcfArray[0] + ",");
                    pWriter.print(tcfArray[1] + ",");
                    pWriter.print(tcfArray[2] + ",");
                    pWriter.print(tcfArray[3] + ",");
                    pWriter.print(tcfArray[4] + ",");
                    pWriter.print(tcfArray[5] + ",");
                    pWriter.print(tcfArray[6] + ",");
                    pWriter.print(tcfArray[7] + ",");
                    pWriter.print(tcfArray[8] + ",");
                    pWriter.print(tcfArray[9] + ",");
                    pWriter.print(tcfArray[10] + ",");
                    pWriter.print(tcfArray[11] + ",");
                    pWriter.print(tcfArray[12] + "/");
                    //TCF Sum
                    pWriter.print(tcfSum + "/");
                    //ECF Array
                    pWriter.print(ecfArray[0] + ",");
                    pWriter.print(ecfArray[1] + ",");
                    pWriter.print(ecfArray[2] + ",");
                    pWriter.print(ecfArray[3] + ",");
                    pWriter.print(ecfArray[4] + ",");
                    pWriter.print(ecfArray[5] + ",");
                    pWriter.print(ecfArray[6] + ",");
                    pWriter.print(ecfArray[7] + "/");
                    //ECF Sum
                    pWriter.print(ecfSum + "\n");
                    counter2++;
                }
            }
            
            //SMI Last 5 Rows
            //SMI
            for(int i=0; i<project.getSMI_ArrayList().size(); i++) {
                if(i==project.getSMI_ArrayList().size()-1) {
                    pWriter.print(project.getSMI_ArrayList().get(i));
                }
                else {
                    pWriter.print(project.getSMI_ArrayList().get(i) + ",");
                }
            }
            pWriter.print("/");
            //Modules Added
            for(int i=0; i<project.getModulesAdded().size(); i++) {
                if(i==project.getModulesAdded().size()-1){
                    pWriter.print(project.getModulesAdded().get(i));
                }
                else {
                    pWriter.print(project.getModulesAdded().get(i) + ",");
                }
            }
            pWriter.print("/");
            //Modules Changed
            for(int i=0; i<project.getModulesChanged().size(); i++) {
                if(i==project.getModulesChanged().size()-1) {
                    pWriter.print(project.getModulesChanged().get(i));
                }
                else {
                    pWriter.print(project.getModulesChanged().get(i) + ",");
                }
            }
            pWriter.print("/");
            //Modules Deleted
            for(int i=0; i<project.getModulesDeleted().size(); i++) {
                if(i==project.getModulesDeleted().size()-1) {
                    pWriter.print(project.getModulesDeleted().get(i));
                }
                else {
                    pWriter.print(project.getModulesDeleted().get(i) + ",");
                }
            }
            pWriter.print("/");
            //Total Modules
            for(int i=0; i<project.getTotalModules().size(); i++) {
                if(i==project.getTotalModules().size()-1) {
                    pWriter.print(project.getTotalModules().get(i));
                }
                else {
                    pWriter.print(project.getTotalModules().get(i) + ",");
                }
            }
            
            pWriter.close();
        }
    }//GEN-LAST:event_file_saveActionPerformed

    private void saveFPMethod() {
        JFileChooser fileChooser = new JFileChooser();
        int response = fileChooser.showSaveDialog(null);
        
        File file2 = null;
        if(response == JFileChooser.APPROVE_OPTION) {
            file2 = new File(fileChooser.getSelectedFile().getAbsolutePath());
            //System.out.println(file2);
            //file2 = new File(fileChooser.getCurrentDirectory());
            
            
            File outputFile = new File(file2 + ".ms");
        

        FileWriter fWriter = null;
        try {
            fWriter = new FileWriter(outputFile);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        //http://stackoverflow.com/questions/4269302/how-do-you-append-to-a-text-file-instead-of-overwriting-it-in-java
        
      
      
        
        PrintWriter pWriter = new PrintWriter(fWriter);
        pWriter.print(project.getProjectName() + "\n");
        pWriter.print(project.getCreator() + "\n");
        pWriter.print(project.getFunctionPointsPanes().size() + "\n");
        for(int i=0; i<project.getFunctionPointsPanes().size(); i++) {
            //pWriter.print("---------------------------------------" + "\n");
            String nameOfPane = project.getFunctionPointsPanes().get(i).getNameOfPane();
            String currentLanguage = project.getFunctionPointsPanes().get(i).getLanguage();
            int [] valueAdjustment = project.getFunctionPointsPanes().get(i).getValueAdjustmentList();
            String valueAdjustmentSum = Integer.toString(project.getFunctionPointsPanes().get(i).getValueAdjustmentSum());
            String EI = Integer.toString(project.getFunctionPointsPanes().get(i).getExternalInput());
            String EO = Integer.toString(project.getFunctionPointsPanes().get(i).getExternalOutput());
            String EInq = Integer.toString(project.getFunctionPointsPanes().get(i).getExternalInquiries());
            String ILF = Integer.toString(project.getFunctionPointsPanes().get(i).getInternalLogicalFiles());
            String EIF = Integer.toString(project.getFunctionPointsPanes().get(i).getExternalInterfaceFiles());
            
            String EIResults = Integer.toString(project.getFunctionPointsPanes().get(i).getExternalInputResults());
            String EOResults = Integer.toString(project.getFunctionPointsPanes().get(i).getExternalOutputResults());
            String EInqResults = Integer.toString(project.getFunctionPointsPanes().get(i).getExternalInquiriesResults());
            String ILFResults = Integer.toString(project.getFunctionPointsPanes().get(i).getInternalLogicalFilesResults());
            String EIFResults = Integer.toString(project.getFunctionPointsPanes().get(i).getExternalInterfaceFilesResults());
            
            String [] complexities = project.getFunctionPointsPanes().get(i).getComplexities();
            String fp = Double.toString(project.getFunctionPointsPanes().get(i).getComputeFP());
            String codeSize = Double.toString(project.getFunctionPointsPanes().get(i).getCodeSize());
            String totalCount = Integer.toString(project.getFunctionPointsPanes().get(i).getTotalCount());
            //Write
            pWriter.print(nameOfPane + "/");
            pWriter.print(currentLanguage + "/");
//            for(int value=0; value<valueAdjustment.length; value++) {
//                pWriter.print(valueAdjustment[value] + ",");
//            }
            pWriter.print(valueAdjustment[0] + ",");
            pWriter.print(valueAdjustment[1] + ",");
            pWriter.print(valueAdjustment[2] + ",");
            pWriter.print(valueAdjustment[3] + ",");
            pWriter.print(valueAdjustment[4] + ",");
            pWriter.print(valueAdjustment[5] + ",");
            pWriter.print(valueAdjustment[6] + ",");
            pWriter.print(valueAdjustment[7] + ",");
            pWriter.print(valueAdjustment[8] + ",");
            pWriter.print(valueAdjustment[9] + ",");
            pWriter.print(valueAdjustment[10] + ",");
            pWriter.print(valueAdjustment[11] + ",");
            pWriter.print(valueAdjustment[12] + ",");
            pWriter.print(valueAdjustment[13] + "/");
            
            pWriter.print(valueAdjustmentSum + "/");
            pWriter.print(EI + "," + EO + "," + EInq + "," + ILF + "," + EIF + "/"); //MAYBE MAKE A LIST?
            pWriter.print(EIResults + "," + EOResults + "," + EInqResults + "," + ILFResults + "," + EIFResults + "/");
//            for(int c = 0; c<complexities.length; c++) {
//                pWriter.print(complexities[c] + ",");
//            }
            pWriter.print(complexities[0] + ",");
            pWriter.print(complexities[1] + ",");
            pWriter.print(complexities[2] + ",");
            pWriter.print(complexities[3] + ",");
            pWriter.print(complexities[4] + "/");
            
            pWriter.print(fp + "/");
            pWriter.print(codeSize + "/");
            pWriter.print(totalCount + "\n");
            //pWriter.print("---------------------------------------");
        }
        pWriter.close();
        }
    }
    
    
    private void file_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_file_exitActionPerformed
        this.dispose();
        System.exit(0);
    }//GEN-LAST:event_file_exitActionPerformed

    private void preferences_languageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preferences_languageActionPerformed
        Language language = new Language(this);
        language.setVisible(true);
        language.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_preferences_languageActionPerformed

    private void metrics_fp_dataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metrics_fp_dataActionPerformed
        if(project!= null) {
            String fpName = JOptionPane.showInputDialog("Name of this FP");
            
            FunctionPointsPane paneContent = new FunctionPointsPane(fpName, currentLanguage, this);
            if(fpName.equals("")) {
                jTabbedPane1.addTab("Untitled", paneContent);
            }
            else {
                jTabbedPane1.addTab(fpName, paneContent);
            }
            //contents.add(content);
            project.addFunctionPointPane(paneContent);
            paneContent.setVisible(true);
            paneArrayList.add(1);
        }
        else {
            JOptionPane.showMessageDialog(null, "Please create a new project first", "", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_metrics_fp_dataActionPerformed

    private void metrics_ucp_dataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metrics_ucp_dataActionPerformed
        // TODO add your handling code here:
        
        if(project!= null) {
            String ucpName = JOptionPane.showInputDialog("Name of this UCP");

            UseCasePointsPane ucpContent = new UseCasePointsPane(ucpName, this);
            if(ucpName.equals("")) {
                jTabbedPane1.addTab("Untitled", ucpContent);
            }
            else {
                jTabbedPane1.addTab(ucpName, ucpContent);
            }
            //contents.add(content);
            project.addUseCasePointPane(ucpContent);
            ucpContent.setVisible(true);
            paneArrayList.add(2);
        }
        else {
            JOptionPane.showMessageDialog(null, "Please create a new project first", "", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_metrics_ucp_dataActionPerformed

    private void metrics_smiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metrics_smiActionPerformed
        if(smiPanel == true) {
                JOptionPane.showMessageDialog(null, "There can be only one SMI Panel per project", "", JOptionPane.INFORMATION_MESSAGE);
                return;
        }
        if(project!= null) {
            //String ucpName = JOptionPane.showInputDialog("Name of this UCP");
            SoftwareMaturityIndexPane smiContent = new SoftwareMaturityIndexPane("SMI");
                jTabbedPane1.addTab("SMI", smiContent);
            //contents.add(content);
            //ADD TO PROJECT CLASS
            //project.addUseCasePointPane(ucpContent);
            project.addSMIPane(smiContent);
            smiContent.setVisible(true);
            paneArrayList.add(3);
            smiPanel = true;
        }
        else {
            JOptionPane.showMessageDialog(null, "Please create a new project first", "", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_metrics_smiActionPerformed

    public void compilerUCPHelp() {
        for(int i=0; i<project.getUseCasePointsPanes().size(); i++) {
            System.out.println(project.getUseCasePointsPanes().get(i).toString());
        }
        
        System.out.println("Number of Panes = " + paneArrayList.size());
    }
    public void compilerFPHelp() {
        System.out.println("Language = " + currentLanguage);

        System.out.println(project.toString());
        //System.out.println();
        for(int i=0; i<project.getFunctionPointsPanes().size(); i++){
            System.out.println(project.getFunctionPointsPanes().get(i).toString());
        }
    }

    
    public String getLanguage(){
        return this.currentLanguage;
    }
    public void setLanguage(String currentLanguage) {
        this.currentLanguage = currentLanguage;
    }
    
    public void setProjectLanguage() {
        if(project!=null) {
            setProjectLanguage(currentLanguage);
        }
    }
    
    public void setProjectLanguage(String currentLanguage) {
        project.setLanguage(currentLanguage);
        System.out.println("Project Language:" + project.getLanguage());
    }
    
    public void createProject(String projectName, String productName, String creator, String comments){
        jTabbedPane1.removeAll();
        project = new Project(projectName, productName, creator, comments, currentLanguage);
        //projects.add(project);
    }
    
    private static void inputPreviousLanguage() {

       // Modified version using text file
       String homeDirectory = System.getProperty("user.home");
          BufferedReader br = null; 
          String line = "";
        try {
            br = new BufferedReader(new FileReader(homeDirectory + "/language.txt"));
            
            System.out.println("What is br?" + br);
            line = br.readLine();
            br.close();
        } catch (Exception ex) { ex.printStackTrace();}
          
        System.out.println("What is the programming language from text file? " + line);
        currentLanguage = line;
        if (!new File(homeDirectory+"/language.txt").exists())
        {
            currentLanguage = "None";
        }
    }
    
    public static void main(String args[]) {
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu edit;
    private javax.swing.JMenu file;
    private javax.swing.JMenuItem file_exit;
    private javax.swing.JMenuItem file_new;
    private javax.swing.JMenuItem file_open;
    private javax.swing.JMenuItem file_save;
    private javax.swing.JMenu help;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JMenu language;
    private javax.swing.JMenu metrics;
    private javax.swing.JMenu metrics_fp;
    private javax.swing.JMenuItem metrics_fp_data;
    private javax.swing.JMenuItem metrics_smi;
    private javax.swing.JMenu metrics_ucp;
    private javax.swing.JMenuItem metrics_ucp_data;
    private javax.swing.JMenuItem preferences_language;
    // End of variables declaration//GEN-END:variables
}
