/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package metricssuite;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author school
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    private static String currentLanguage = "None";
    private static Project project;
    //private ArrayList<Project> projects = new ArrayList<Project>();
    
    public MainFrame() {
        initComponents();
        inputPreviousLanguage();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        file = new javax.swing.JMenu();
        file_new = new javax.swing.JMenuItem();
        file_open = new javax.swing.JMenuItem();
        file_save = new javax.swing.JMenuItem();
        file_exit = new javax.swing.JMenuItem();
        edit = new javax.swing.JMenu();
        language = new javax.swing.JMenu();
        preferences_language = new javax.swing.JMenuItem();
        metrics = new javax.swing.JMenu();
        metrics_fp = new javax.swing.JMenu();
        metrics_fp_data = new javax.swing.JMenuItem();
        help = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CECS 543 Metrics Suite - Function Points");

        file.setText("File");

        file_new.setText("New");
        file_new.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                file_newActionPerformed(evt);
            }
        });
        file.add(file_new);

        file_open.setText("Open");
        file_open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                file_openActionPerformed(evt);
            }
        });
        file.add(file_open);

        file_save.setText("Save");
        file_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                file_saveActionPerformed(evt);
            }
        });
        file.add(file_save);

        file_exit.setText("Exit");
        file_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                file_exitActionPerformed(evt);
            }
        });
        file.add(file_exit);

        jMenuBar1.add(file);

        edit.setText("Edit");
        jMenuBar1.add(edit);

        language.setText("Preferences");

        preferences_language.setText("Language");
        preferences_language.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                preferences_languageActionPerformed(evt);
            }
        });
        language.add(preferences_language);

        jMenuBar1.add(language);

        metrics.setText("Metrics");

        metrics_fp.setText("Function Points");

        metrics_fp_data.setText("FP Data");
        metrics_fp_data.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metrics_fp_dataActionPerformed(evt);
            }
        });
        metrics_fp.add(metrics_fp_data);

        metrics.add(metrics_fp);

        jMenuBar1.add(metrics);

        help.setText("Help");
        jMenuBar1.add(help);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 688, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void file_newActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_file_newActionPerformed
        NewWindow newWindow = new NewWindow(this, project);
        newWindow.setVisible(true);
        newWindow.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_file_newActionPerformed

    private void file_openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_file_openActionPerformed
        ArrayList<String> data = new ArrayList<>();
        String projectName = "";
        String creator = "";
        int numberOfPanes;

        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new java.io.File("."));
        fc.setDialogTitle("Open Project");
        FileFilter filter = new FileNameExtensionFilter("*.ms", ".ms", "ms");
        fc.setFileFilter(filter);
        if(fc.showOpenDialog(file_open) == JFileChooser.APPROVE_OPTION) {
            // read content
            String filepath = fc.getSelectedFile().getAbsolutePath();
            
            jTabbedPane1.removeAll();
            
            try {
                /*Help from: https://www.javatpoint.com/java-jfilechooser*/
                BufferedReader br = new BufferedReader(new FileReader(filepath));
                
                projectName = br.readLine();
                creator = br.readLine();
                numberOfPanes = Integer.parseInt(br.readLine());
                System.out.println("ProjectName = " + projectName);
                System.out.println("Creator = " + creator);
                System.out.println("Number of Panes = " + numberOfPanes);
                
                ArrayList<String> nameOfPanes = new ArrayList<>(); //
                ArrayList<String> languagesPerPane = new ArrayList<>(); //
                ArrayList<String []> vafPerPane = new ArrayList<>(); //
                ArrayList<String> sumOfVAFPerPane = new ArrayList<>(); //
                ArrayList<String []> functionDataPerPane = new ArrayList<>();
                ArrayList<String []> functionDataResultsPerPane = new ArrayList<>();
                ArrayList<String []> complexitiesPerPane = new ArrayList<>();
                ArrayList<String> functionPointsPerPane = new ArrayList<>();
                ArrayList<String> codeSizePerPane = new ArrayList<>();
                ArrayList<String> totalCountPerPane = new ArrayList<>();
                for(int i=0; i<numberOfPanes; i++) {
                    data.add(br.readLine());
                }
                br.close();

                //Grab the information from each line
                for(int i=0; i<data.size(); i++) {
                    String [] splitData = data.get(i).split("/");
                    nameOfPanes.add(splitData[0]);
                    languagesPerPane.add(splitData[1]);
                    vafPerPane.add(splitData[2].split(","));
                    sumOfVAFPerPane.add(splitData[3]);
                    functionDataPerPane.add(splitData[4].split(","));
                    functionDataResultsPerPane.add(splitData[5].split(","));
                    complexitiesPerPane.add(splitData[6].split(","));//
                    functionPointsPerPane.add(splitData[7]);
                    codeSizePerPane.add(splitData[8]);
                    totalCountPerPane.add(splitData[9]);
                }
                
                System.out.println("Name of Panes");
                for(int i=0; i<nameOfPanes.size(); i++) {
                System.out.println(nameOfPanes.get(i));
                }
                System.out.println("Languages");
                for(int i=0; i<nameOfPanes.size(); i++) {
                System.out.println(languagesPerPane.get(i));
                }
                System.out.println("Vaf");
                for(int i=0; i<nameOfPanes.size(); i++) {
                    for(int j=0; j<vafPerPane.get(i).length; j++) {
                        System.out.print(vafPerPane.get(i)[j]);
                    }
                    System.out.println("");
                }
                System.out.println("sum of Vaf");
                for(int i=0; i<nameOfPanes.size(); i++) {
                System.out.println(sumOfVAFPerPane.get(i) + ", ");
                }
                System.out.println("function data per pane");
                for(int i=0; i<nameOfPanes.size(); i++) {
                    for(int j=0; j<functionDataPerPane.get(i).length; j++) {
                            System.out.print(functionDataPerPane.get(i)[j] + ", ");
                        }
                    System.out.println("");
                }
                System.out.println("function data results per pane");
                for(int i=0; i<nameOfPanes.size(); i++) {
                    for(int j=0; j<functionDataResultsPerPane.get(i).length; j++) {
                            System.out.print(functionDataResultsPerPane.get(i)[j] + ", ");
                        }
                    System.out.println("");
                }
                System.out.println("Complexity Pane");
                for(int i=0; i<nameOfPanes.size(); i++) {
                    for(int j=0; j<complexitiesPerPane.get(i).length; j++) {
                            System.out.print(complexitiesPerPane.get(i)[j] + ", ");
                        }
                    System.out.println("");
                }
                System.out.println("FP per pane");
                for(int i=0; i<nameOfPanes.size(); i++) {
                System.out.println(functionPointsPerPane.get(i));
                }
                System.out.println("Code size per pane");
                for(int i=0; i<nameOfPanes.size(); i++) {
                System.out.println(codeSizePerPane.get(i));
                }
                System.out.println("total count pane");
                for(int i=0; i<nameOfPanes.size(); i++) {
                System.out.println(totalCountPerPane.get(i));
                }
                
                //Create project w/ information from textfile
                createProject(projectName, "", creator, "");
                //Name of Panes
                for (int i=0; i<numberOfPanes; i++) {
                    String s = nameOfPanes.get(i);
                    FunctionPointsPane p = new FunctionPointsPane(s, "", this);
                    jTabbedPane1.addTab(s, p);
                    //jTabbedPane1.ind
                    project.addProjectPane(p);
                    p.setVisible(true);
                }
                //Language
                for(int i=0; i<numberOfPanes; i++) {
                    String language = languagesPerPane.get(i);
                    project.getProjectPanes().get(i).setLanguage(language);
                    project.getProjectPanes().get(i).setLanguageData(language);
                }
                //VAF Per FunctionPointsPane
                for(int i=0; i<numberOfPanes; i++) {
                    //System.out.print(vafPerPane.get(1)[i] + ",");
                    int [] vafArray = new int[14];
                    for(int j=0; j<14; j++) {
                        vafArray[j] = Integer.parseInt(vafPerPane.get(i)[j]);
                    }
                    project.getProjectPanes().get(i).setValueAdjustmentList(vafArray);
                    
                }
                //SumOfVAFPerPane
                for(int i=0; i<numberOfPanes; i++) {
                    int sum = Integer.parseInt(sumOfVAFPerPane.get(i));
                    project.getProjectPanes().get(i).setValueAdjustmentSum(sum);
                    project.getProjectPanes().get(i).setValueAdjustmentData(Integer.toString(sum));
                }
                //functionDataPerPane
                int value = 0;
                for(int i=0; i<numberOfPanes; i++) {
                    value = Integer.parseInt(functionDataPerPane.get(i)[0]);
                    project.getProjectPanes().get(i).setExternalInput(value);
                    project.getProjectPanes().get(i).setEIsEdit(Integer.toString(value));
                    
                    value = Integer.parseInt(functionDataPerPane.get(i)[1]);
                    project.getProjectPanes().get(i).setExternalOutput(value);
                    project.getProjectPanes().get(i).setEOsEdit(Integer.toString(value));
                    
                    value = Integer.parseInt(functionDataPerPane.get(i)[2]);
                    project.getProjectPanes().get(i).setExternalInquiries(value);
                    project.getProjectPanes().get(i).setEInqsEdit(Integer.toString(value));
                    
                    value = Integer.parseInt(functionDataPerPane.get(i)[3]);
                    project.getProjectPanes().get(i).setInternalLogicalFiles(value);
                    project.getProjectPanes().get(i).setILFsEdit(Integer.toString(value));
                    
                    value = Integer.parseInt(functionDataPerPane.get(i)[4]);
                    project.getProjectPanes().get(i).setExternalInterfaceFiles(value);
                    project.getProjectPanes().get(i).setEIFsEdit(Integer.toString(value));
                }
                
                //functionDataResultsPerPane
                int value2 = 0;
                for(int i=0; i<numberOfPanes; i++) {
                    value2 = Integer.parseInt(functionDataResultsPerPane.get(i)[0]);
                    project.getProjectPanes().get(i).setExternalInputResults(value2);
                    project.getProjectPanes().get(i).setEIData(Integer.toString(value2));
                    
                    value2 = Integer.parseInt(functionDataResultsPerPane.get(i)[1]);
                    project.getProjectPanes().get(i).setExternalOutputResults(value2);
                    project.getProjectPanes().get(i).setEOData(Integer.toString(value2));
                    
                    value2 = Integer.parseInt(functionDataResultsPerPane.get(i)[2]);
                    project.getProjectPanes().get(i).setExternalInquiriesResults(value2);
                    project.getProjectPanes().get(i).setEInqData(Integer.toString(value2));
                    
                    value2 = Integer.parseInt(functionDataResultsPerPane.get(i)[3]);
                    project.getProjectPanes().get(i).setInternalLogicalFilesResults(value2);
                    project.getProjectPanes().get(i).setILFData(Integer.toString(value2));
                    
                    value2 = Integer.parseInt(functionDataResultsPerPane.get(i)[4]);
                    project.getProjectPanes().get(i).setExternalInterfaceFilesResults(value2);
                    project.getProjectPanes().get(i).setEIFData(Integer.toString(value2));
                }
                //complexity
                for (int i=0; i<numberOfPanes; i++) {
                    project.getProjectPanes().get(i).complexities(complexitiesPerPane.get(i));
                }
                DecimalFormat df = new DecimalFormat("###,###,###.##");
                
                //functionPointsPerPane
                for(int i=0; i<numberOfPanes; i++) {
                    double sum = Double.parseDouble(functionPointsPerPane.get(i));
                    project.getProjectPanes().get(i).setComputeFP(sum);
                    String formattedFP = df.format(sum);
                    project.getProjectPanes().get(i).setComputeFPData(formattedFP);
                }
               
                //codeSizePerPane
                for(int i=0; i<numberOfPanes; i++) {
                    double sum = Double.parseDouble(codeSizePerPane.get(i));
                    project.getProjectPanes().get(i).setCodeSize(sum);
                    String formattedFP = df.format(sum);
                    project.getProjectPanes().get(i).setComputeCodeSizeData(formattedFP);
                }       
                //totalCountPerPane
                for(int i=0; i<numberOfPanes; i++) {
                    int sum = Integer.parseInt(totalCountPerPane.get(i));
                    project.getProjectPanes().get(i).setTotalCount(sum);
                    //String formattedFP = df.format(sum);
                    project.getProjectPanes().get(i).setTotalCountData(Integer.toString(sum));
                }
            } catch (Exception ex) {ex.printStackTrace();}
        }
        else {
            System.out.println("Cancel");
        }
        System.out.println(fc.getSelectedFile().getAbsolutePath()); 
    }//GEN-LAST:event_file_openActionPerformed

    private void file_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_file_saveActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        int response = fileChooser.showSaveDialog(null);
        
        File file2 = null;
        if(response == JFileChooser.APPROVE_OPTION) {
            file2 = new File(fileChooser.getSelectedFile().getAbsolutePath());
            //System.out.println(file2);
            //file2 = new File(fileChooser.getCurrentDirectory());
            
            
            File outputFile = new File(file2 + ".ms");
        

        FileWriter fWriter = null;
        try {
            fWriter = new FileWriter(outputFile);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        /*http://stackoverflow.com/questions/4269302/how-do-you-append-to-a-text-file-instead-of-overwriting-it-in-java
        */
        PrintWriter pWriter = new PrintWriter(fWriter);
        pWriter.print(project.getProjectName() + "\n");
        pWriter.print(project.getCreator() + "\n");
        pWriter.print(project.getProjectPanes().size() + "\n");
        for(int i=0; i<project.getProjectPanes().size(); i++) {
            //pWriter.print("---------------------------------------" + "\n");
            String nameOfPane = project.getProjectPanes().get(i).getNameOfPane();
            String currentLanguage = project.getProjectPanes().get(i).getLanguage();
            int [] valueAdjustment = project.getProjectPanes().get(i).getValueAdjustmentList();
            String valueAdjustmentSum = Integer.toString(project.getProjectPanes().get(i).getValueAdjustmentSum());
            String EI = Integer.toString(project.getProjectPanes().get(i).getExternalInput());
            String EO = Integer.toString(project.getProjectPanes().get(i).getExternalOutput());
            String EInq = Integer.toString(project.getProjectPanes().get(i).getExternalInquiries());
            String ILF = Integer.toString(project.getProjectPanes().get(i).getInternalLogicalFiles());
            String EIF = Integer.toString(project.getProjectPanes().get(i).getExternalInterfaceFiles());
            
            String EIResults = Integer.toString(project.getProjectPanes().get(i).getExternalInputResults());
            String EOResults = Integer.toString(project.getProjectPanes().get(i).getExternalOutputResults());
            String EInqResults = Integer.toString(project.getProjectPanes().get(i).getExternalInquiriesResults());
            String ILFResults = Integer.toString(project.getProjectPanes().get(i).getInternalLogicalFilesResults());
            String EIFResults = Integer.toString(project.getProjectPanes().get(i).getExternalInterfaceFilesResults());
            
            String [] complexities = project.getProjectPanes().get(i).getComplexities();
            String fp = Double.toString(project.getProjectPanes().get(i).getComputeFP());
            String codeSize = Double.toString(project.getProjectPanes().get(i).getCodeSize());
            String totalCount = Integer.toString(project.getProjectPanes().get(i).getTotalCount());
            //Write
            pWriter.print(nameOfPane + "/");
            pWriter.print(currentLanguage + "/");
//            for(int value=0; value<valueAdjustment.length; value++) {
//                pWriter.print(valueAdjustment[value] + ",");
//            }
            pWriter.print(valueAdjustment[0] + ",");
            pWriter.print(valueAdjustment[1] + ",");
            pWriter.print(valueAdjustment[2] + ",");
            pWriter.print(valueAdjustment[3] + ",");
            pWriter.print(valueAdjustment[4] + ",");
            pWriter.print(valueAdjustment[5] + ",");
            pWriter.print(valueAdjustment[6] + ",");
            pWriter.print(valueAdjustment[7] + ",");
            pWriter.print(valueAdjustment[8] + ",");
            pWriter.print(valueAdjustment[9] + ",");
            pWriter.print(valueAdjustment[10] + ",");
            pWriter.print(valueAdjustment[11] + ",");
            pWriter.print(valueAdjustment[12] + ",");
            pWriter.print(valueAdjustment[13] + "/");
            
            pWriter.print(valueAdjustmentSum + "/");
            pWriter.print(EI + "," + EO + "," + EInq + "," + ILF + "," + EIF + "/"); //MAYBE MAKE A LIST?
            pWriter.print(EIResults + "," + EOResults + "," + EInqResults + "," + ILFResults + "," + EIFResults + "/");
//            for(int c = 0; c<complexities.length; c++) {
//                pWriter.print(complexitiesPerPane[c] + ",");
//            }
            pWriter.print(complexities[0] + ",");
            pWriter.print(complexities[1] + ",");
            pWriter.print(complexities[2] + ",");
            pWriter.print(complexities[3] + ",");
            pWriter.print(complexities[4] + "/");
            
            pWriter.print(fp + "/");
            pWriter.print(codeSize + "/");
            pWriter.print(totalCount + "\n");
            //pWriter.print("---------------------------------------");
        }
        pWriter.close();
        }
        
        
        
    }//GEN-LAST:event_file_saveActionPerformed

    private void file_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_file_exitActionPerformed
        // TODO add your handling code here:
        this.dispose();
        System.exit(0);
    }//GEN-LAST:event_file_exitActionPerformed

    private void preferences_languageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preferences_languageActionPerformed
        // TODO add your handling code here:
        Language language = new Language(this);
        language.setVisible(true);
        language.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        //project.setLanguage(currentLanguage);
        //Have a text file that saves the language that should restart next time program opens
    }//GEN-LAST:event_preferences_languageActionPerformed

    private void metrics_fp_dataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metrics_fp_dataActionPerformed
        // TODO add your handling code here:
        //inputPreviousLanguage();
        if(project!= null) {
            String fpName = JOptionPane.showInputDialog("Name of this FP");
            
            FunctionPointsPane paneContent = new FunctionPointsPane(fpName, currentLanguage, this);
            if(fpName.equals("")) {
                jTabbedPane1.addTab("Untitled", paneContent);
            }
            else {
                jTabbedPane1.addTab(fpName, paneContent);
            }
            //contents.add(content);
            project.addProjectPane(paneContent);
            paneContent.setVisible(true);
        }
        else {
            JOptionPane.showMessageDialog(null, "Please create a new project first", "", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_metrics_fp_dataActionPerformed

    /**
     * @param args the command line arguments
     */
    public void compilerHelp() {
        System.out.println("Language = " + currentLanguage);

        System.out.println(project.toString());
        //System.out.println();
        for(int i=0; i<project.getProjectPanes().size(); i++){
            System.out.println(project.getProjectPanes().get(i).toString());
        }
    }
    
    public String getLanguage(){
        return this.currentLanguage;
    }
    public void setLanguage(String currentLanguage) {
        this.currentLanguage = currentLanguage;
    }
    
    public void setProjectLanguage() {
        if(project!=null) {
            setProjectLanguage(currentLanguage);
        }
    }
    
    public void setProjectLanguage(String currentLanguage) {
        project.setLanguage(currentLanguage);
        System.out.println("Project Language:" + project.getLanguage());
    }
    
    public void createProject(String projectName, String productName, String creator, String comments){
        jTabbedPane1.removeAll();
        project = new Project(projectName, productName, creator, comments, currentLanguage);
        //projects.add(project);
    }
    
    private static void inputPreviousLanguage() {

       // Modified version using text file
       String homeDirectory = System.getProperty("user.home");
          BufferedReader br = null; 
          String line = "";
        try {
            br = new BufferedReader(new FileReader(homeDirectory + "/language.txt"));
            
            System.out.println("What is br?" + br);
            line = br.readLine();
            br.close();
        } catch (Exception ex) { ex.printStackTrace();}
          
        System.out.println("What is the programming language from text file? " + line);
        currentLanguage = line;
        if (!new File(homeDirectory+"/language.txt").exists())
        {
            currentLanguage = "None";
        }
    }
    
    public static void main(String args[]) {
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu edit;
    private javax.swing.JMenu file;
    private javax.swing.JMenuItem file_exit;
    private javax.swing.JMenuItem file_new;
    private javax.swing.JMenuItem file_open;
    private javax.swing.JMenuItem file_save;
    private javax.swing.JMenu help;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JMenu language;
    private javax.swing.JMenu metrics;
    private javax.swing.JMenu metrics_fp;
    private javax.swing.JMenuItem metrics_fp_data;
    private javax.swing.JMenuItem preferences_language;
    // End of variables declaration//GEN-END:variables
}
