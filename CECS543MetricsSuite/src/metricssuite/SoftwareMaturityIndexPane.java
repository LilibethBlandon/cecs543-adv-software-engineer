/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package metricssuite;

import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author school
 */
public class SoftwareMaturityIndexPane extends javax.swing.JPanel {

    /**
     * Creates new form SoftwareMaturityIndexPane
     */
    private String panelName = "";
    private ArrayList<Double> smi = new ArrayList<>();
    private ArrayList<Integer> modulesAdded = new ArrayList<>();
    private ArrayList<Integer> modulesChanged = new ArrayList<>();
    private ArrayList<Integer> modulesDeleted = new ArrayList<>();
    private ArrayList<Integer> totalModules = new ArrayList<>();
    private DefaultTableModel model;
    
    public SoftwareMaturityIndexPane() {
        initComponents();
    }

    public SoftwareMaturityIndexPane(String s) {
        this.panelName = s;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addRowjButton = new javax.swing.JButton();
        computeIndexjButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        addRowjButton.setText("Add Row");
        addRowjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRowjButtonActionPerformed(evt);
            }
        });

        computeIndexjButton.setText("Compute Index");
        computeIndexjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                computeIndexjButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel1.setText("Software Maturity Index");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SMI", "Modules Added", "Modules Changed", "Modules Deleted", "Total Modules"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addRowjButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(computeIndexjButton)
                .addGap(72, 72, 72))
            .addGroup(layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 581, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 82, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(259, 259, 259)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addRowjButton)
                    .addComponent(computeIndexjButton))
                .addGap(28, 28, 28))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void computeIndexjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_computeIndexjButtonActionPerformed
        int row = jTable1.getSelectedRow();
        System.out.println("Row = " + row);
        if(row == 0) {
            if (jTable1.isEditing())
                jTable1.getCellEditor().stopCellEditing();
            
            String currentModulesAdded = jTable1.getValueAt(row, 1).toString();
            System.out.println("Current modules added = " + currentModulesAdded);
            double SMI = (Double.parseDouble(currentModulesAdded)-(Double.parseDouble(currentModulesAdded)+0+0))/Double.parseDouble(currentModulesAdded);
            jTable1.setValueAt((Object)Double.toString(SMI), 0, 0);
            jTable1.setValueAt((Object)"0.0", 0, 2);
            jTable1.setValueAt((Object)"0.0", 0, 3);
            jTable1.setValueAt((Object)currentModulesAdded, 0, 4);
            //Add to arraylist
            smi.add(SMI);
            modulesAdded.add(Integer.parseInt(currentModulesAdded));
            modulesChanged.add(0);
            modulesDeleted.add(0);
            totalModules.add(Integer.parseInt(currentModulesAdded));
        }
        else {
            if (jTable1.isEditing())
                jTable1.getCellEditor().stopCellEditing();
            String previousTotalModules = jTable1.getValueAt(row-1,4).toString();
            String currentModulesAdded = jTable1.getValueAt(row, 1).toString();
            String currentModulesChanged = jTable1.getValueAt(row, 2).toString();
            String currentModulesDeleted = jTable1.getValueAt(row, 3).toString();
            int currentTotalModules = Integer.parseInt(previousTotalModules) + Integer.parseInt(currentModulesAdded) - Integer.parseInt(currentModulesDeleted);
            double SMI = (currentTotalModules-(Double.parseDouble(currentModulesAdded)+Double.parseDouble(currentModulesChanged)+Double.parseDouble(currentModulesDeleted)))/currentTotalModules;
            
            jTable1.setValueAt((Object)Double.toString(SMI), row, 0);
            jTable1.setValueAt((Object)Integer.toString(currentTotalModules), row, 4);
            
            smi.add(SMI);
            modulesAdded.add(Integer.parseInt(currentModulesAdded));
            modulesChanged.add(Integer.parseInt(currentModulesChanged));
            modulesDeleted.add(Integer.parseInt(currentModulesDeleted));
            totalModules.add(currentTotalModules);
        }
    }//GEN-LAST:event_computeIndexjButtonActionPerformed

    public String getPanelName() {
        return panelName;
    }

    public void setPanelName(String panelName) {
        this.panelName = panelName;
    }

    public ArrayList<Double> getSmi() {
        return smi;
    }

    public void setSmi(ArrayList<Double> smi) {
        this.smi = smi;
    }

    public ArrayList<Integer> getModulesAdded() {
        return modulesAdded;
    }

    public void setModulesAdded(ArrayList<Integer> modulesAdded) {
        this.modulesAdded = modulesAdded;
    }

    public ArrayList<Integer> getModulesChanged() {
        return modulesChanged;
    }

    public void setModulesChanged(ArrayList<Integer> modulesChanged) {
        this.modulesChanged = modulesChanged;
    }

    public ArrayList<Integer> getModulesDeleted() {
        return modulesDeleted;
    }

    public void setModulesDeleted(ArrayList<Integer> modulesDeleted) {
        this.modulesDeleted = modulesDeleted;
    }

    public ArrayList<Integer> getTotalModules() {
        return totalModules;
    }

    public void setTotalModules(ArrayList<Integer> totalModules) {
        this.totalModules = totalModules;
    }
    
    public void addRow() {
        model = (DefaultTableModel) jTable1.getModel();
        model.addRow(new Object[]{"", "", "", "", ""});
    }
    
    private void addRowjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRowjButtonActionPerformed
        model = (DefaultTableModel) jTable1.getModel();
        model.addRow(new Object[]{"", "", "", "", ""});
        
    }//GEN-LAST:event_addRowjButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addRowjButton;
    private javax.swing.JButton computeIndexjButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
